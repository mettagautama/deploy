# -*- coding: utf-8 -*-
"""credit_card_fraud_fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NsR91bqwLEDcvY8thBEhIzO75TvnXZw
"""

#Install library:
pip install pandas
!pip install numpy
!pip install seaborn
!pip install scikit-learn
!pip install matplotlib

# Import library:
import pandas as pd
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Membaca dataset account
url = 'https://github.com/csry15/Fraud_data/blob/main/account_data.csv/?raw=True'
account_data = pd.read_csv(url)

account_data

# Menghitung missing values pada dataset account
account_data.isnull().sum()

# Periksa tipe data feature account
account_data.dtypes

account_data['IsFraud'] = account_data['IsFraud'].replace({'Yes': 1, 'No': 0})

account_data['IsFraud'].value_counts()

# Describe Data
account_data.describe().T

account_data[
    'MaritalStatus'
].value_counts()

account_data[
    'Occupation'
].value_counts()

data_temp = pd.get_dummies(account_data[['Occupation', 'MaritalStatus','ResidentialStatus', 'PurposeoftheLoan', 'Collateral', 'ApplicationBehavior',
                                         'LocationofApplication', 'ChangeinBehavior', 'AccountActivity', 'PaymentBehavior', 'Blacklists',
                                         'EmploymentVerification', 'PastFinancialMalpractices', 'DeviceInformation', 'SocialMediaFootprint',
                                         'ConsistencyinData', 'Referral']])
account_df = pd.concat([account_data, data_temp], axis=1)
account_df.drop(columns=['Occupation', 'MaritalStatus', 'ResidentialStatus', 'PurposeoftheLoan',  'Collateral', 'ApplicationBehavior', 'LocationofApplication',
                         'ChangeinBehavior', 'AccountActivity', 'PaymentBehavior', 'Blacklists', 'EmploymentVerification', 'PastFinancialMalpractices',
                         'DeviceInformation', 'SocialMediaFootprint', 'ConsistencyinData', 'Referral'], inplace=True)

pd.set_option('display.max_columns', None)
account_df.sample(10)

account_df = account_df.loc[:, ~account_df.columns.str.contains('^TimeofTransaction')]

account_df_feature = account_df.drop('IsFraud',1)
sr_IsFraud= account_df['IsFraud']

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2

chi2_selector = SelectKBest(chi2, k = 10)
chi2_selector.fit(account_df_feature, sr_IsFraud)

cols = chi2_selector.get_support(indices=True)
account_df_feature = account_df_feature.iloc[:,cols]

account_df_feature

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Variabel X dan y seperti yang Anda berikan
y = account_df['IsFraud']
X = account_df.drop(['Age','AddressDuration', 'DeviceInformation_Mobile', 'ConsistencyinData_Inconsistent', 'LocationofApplication_Unusual', 'EmploymentVerification_Not Verified'], axis=1)

# Memisahkan data menjadi set pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Menerapkan SMOTE untuk oversampling
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# Inisialisasi model SVM
svm_model = SVC(C=1.0, kernel='rbf', random_state=42)

# Melatih model SVM menggunakan data pelatihan yang sudah diresample
svm_model.fit(X_train_resampled, y_train_resampled)

# Lakukan prediksi menggunakan data pengujian
y_pred = svm_model.predict(X_test)

# Evaluasi performa model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Confusion Matrix:\n{conf_matrix}')
print(f'Classification Report:\n{class_report}')

# Membuat matriks konfusi menggunakan seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()
